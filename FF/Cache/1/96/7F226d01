//use this if you do not know how many records will be deleted
var gErrDeletePreConfirmMsg = 'Please confirm that you would like to perform the delete by clicking the OK button below.  You will not be able to access deleted records once they have been removed.'

var gErrDeleteRemoveAllConfirmMsg = 'Please confirm that you would like to remove the members of the selected groups by clicking the OK button below.'

//use this if only one record will be deleted
var gErrSingleDeletePreConfirmMsg = 'Please confirm that you would like to delete this record by clicking the OK button below.  You will not be able to access the deleted record once it has been removed.'

//use this if only more than one record will be deleted
var gErrMultiDeletePreConfirmMsg = 'Please confirm that you would like to delete these records by clicking the OK button below.  You will not be able to access the deleted records once they have been removed.'

//use this for all other actions requiring a pre-confirmation message
var gErrGenericPreConfirmMsg = 'Please confirm that you would like to perform this action by clicking the OK button below.'


// DreamWeaver roll-over functions......

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v3.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=nsubstring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document); return x;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}

//Ashwin - Timestamp -- used to make your href unique, to work around the IE5 caching bug
function getTimeStamp()
{
	var newDate = new Date();
	return newDate.getTime();
}

//Ashwin - AY Null constants
const_AY_NullString = "AY_Null_String"
const_AY_NullDate = 0
const_AY_NullLong = -2147483640
const_AY_NullInteger = -32760
const_AY_NullSingle = -3.40282E+38
const_AY_NullDouble = -1.7976931348623E+308


// setMessage sets the contents of the "divAyConfirmation" to a specified value
// and then expires it after 5 seconds....
function setMessage(msg)
{
	divAyConfirmation.innerHTML = "<font color='#004731'>" + msg + "</font>";
	divAyConfirmation.style.display = "block";
	//after 5 seconds, empty the message, and hide the div element.
	window.setTimeout("divAyConfirmation.innerHTML = '';divAyConfirmation.style.display='none';", 10000);
}
//confirmDelete displays Javascript confirmation box to the user .
function confirmDelete(nNumber)
{
	if (nNumber != null)
	{
			
		if (nNumber == 1)
			return confirm(gErrSingleDeletePreConfirmMsg);
		else if (nNumber == 0)
			return confirm(gErrDeleteRemoveAllConfirmMsg);
		else if(nNumber > 1)
			return confirm(gErrMultiDeletePreConfirmMsg);	
	}
	else
		return confirm(gErrDeletePreConfirmMsg);
}


// Show/Hide instruction functions for AYAdmin / CLientAdmin Pages  (added by Jamie)
ie4 = (document.all)? true:false;
var isFirefox = typeof InstallTrigger !== 'undefined';   // Firefox 1.0+
var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0; // At least Safari 3+: "[object HTMLElementConstructor]"
var isChrome = !!window.chrome;              // Chrome 1+
var isIE = /*@cc_on!@*/false || !!document.documentMode; // At least IE6


function show(id) {
	if (isFirefox || isSafari || (isIE) || ie4) document.all[id].style.display = "block";
	else document.getElementById(id).style.display = "block";
}

function hide(id) {
	if (isIE || isFirefox || isSafari || ie4) document.all[id].style.display = "none";
	else document.getElementById(id).style.display = "none";
}


var toggleSelectsMarker = 1;
// Toggle Select Box Visibility On/Off for the DIV left menu
function toggleSelects(mode)
{
	var blnGo = false;
	var strStyle;
	var objForm;
	if ((mode == 0) && (toggleSelectsMarker == 1)){
		toggleSelectsMarker = 0;
		strStyle = "hidden";
		blnGo = true;
	}
	else if ((mode == 1) && (toggleSelectsMarker == 0)) {
		toggleSelectsMarker = 1;
		strStyle = "visible";
		blnGo = true;
	}
	if (blnGo == true)
	{
		for (var y=0;y<document.forms.length;y++)
		{
			objForm = document.forms[y];
			for (var x=0;x<objForm.length;x++)
			{
				var item = objForm.elements[x];
				if ((item.type == "select-one") || (item.type == "select-multiple"))
					item.style.visibility = strStyle;
			}
		}
	}
}

//set focus to first element on a page, usually a text box
function setFocus() {
	var i=0;		
	while (document.forms[0].elements[i].type == "hidden") {
		i++;
	}
	document.forms[0].elements[i].focus();
}

 //pandi on 01/24/02 for custom scripting
 function getselectedvalue(Obj)
	 {	
	 	for (var i=0; i < Obj.length ; i++)
		{
			if (Obj[i].selected == true)
			{
				 return Obj[i].value;
			}
		}			
	 }

	function getselectedtext(Obj)
	 {	
	 	for (var i=0; i < Obj.length ; i++)
		{
			if (Obj[i].selected == true)
			{
				 return Obj[i].text;
			}
		}			
	 }
	 
	function getselectObjbyID(strname)
	{
		for (var i=0;i<document.frmMain.elements.length;++i){
			var objSel = document.frmMain.elements[i];
			if ((objSel.type == "select-one") || (objSel.type == "select-multiple"))
			{
				var strSelName = objSel.name;
				var Pos = strSelName.indexOf("_");
				if (strSelName.substring(0, Pos + 1) == strname)
				{
					return objSel;
				}
			}
		}
	}
	
	function getradiovalue(Objradio)
	 {	
	 	for (var i=0; i < Objradio.length ; i++)
		{
			if (Objradio[i].checked == true)
			{
				 return Objradio[i].value;
			}
		}			
	 }
	
function printo()
	{	  
	    
    // convert all characters to lowercase to simplify testing
    var agt=navigator.userAgent.toLowerCase();
    // *** BROWSER VERSION ***
    // Note: On IE5, these return 4, so use is.ie5up to detect IE5.
    var is_major = parseInt(navigator.appVersion);
    var is_minor = parseFloat(navigator.appVersion);

    var is_nav  = ((agt.indexOf('mozilla')!=-1) && (agt.indexOf('spoofer')==-1)
                && (agt.indexOf('compatible') == -1) && (agt.indexOf('opera')==-1)
                && (agt.indexOf('Webtv')==-1));
    var is_nav2 = (is_nav && (is_major == 2));
    var is_nav3 = (is_nav && (is_major == 3));
    var is_nav4 = (is_nav && (is_major == 4));
    var is_nav4up = (is_nav && (is_major >= 4));
    var is_navonly      = (is_nav && ((agt.indexOf(";nav") != -1) ||
                          (agt.indexOf("; nav") != -1)) );
    var is_nav5 = (is_nav && (is_major == 5));
    var is_nav5up = (is_nav && (is_major >= 5));

    var is_ie   = (agt.indexOf("msie") != -1);
    var is_ie3  = (is_ie && (is_major < 4));
    var is_ie4  = (is_ie && (is_major == 4) && (agt.indexOf("msie 5.0")==-1) && (agt.indexOf("msie 6.0")==-1) &&(agt.indexOf("msie 7.0")==-1)&&(agt.indexOf("msie 8.0")==-1));
    var is_ie4up  = (is_ie  && (is_major >= 4));
    var is_ie5  = (is_ie && (is_major == 4) && (agt.indexOf("msie 5.0")!=-1) );
    var is_ie5up  = (is_ie  && !is_ie3 && !is_ie4);

    var is_mac = (agt.indexOf("mac")!=-1);
	var is_notmac = (agt.indexOf("mac")==-1);		
			if (is_nav4up)
			{
				NS();
			}
			else if (is_ie4up && is_mac)
			{
				alert("Please use file menu, print instead.");
			}
			else if (is_ie4 && is_notmac)
			{
				IE4();
				//return true;
			}
			else if (is_ie5up && is_notmac)
			{	
				IE5();
				//return true;
			}	
	}

	function NS()
	{
		window.print();
		return true;
	}
		
	function IE4()
	{
		var OLECMDID_PRINT = 6;
		var OLECMDEXECOPT_DONTPROMPTUSER = 2;
		var OLECMDEXECOPT_PROMPTUSER = 1;
		var WebBrowser = '<OBJECT ID="WebBrowser1" WIDTH=0 HEIGHT=0 CLASSID="CLSID:8856F961-340A-11D0-A96B-00C04FD705A2"></OBJECT>';
		document.body.insertAdjacentHTML('beforeEnd', WebBrowser);
		
		oldHandler = window.onerror;
		window.onerror = deal;
		
		WebBrowser1.ExecWB(OLECMDID_PRINT, OLECMDEXECOPT_DONTPROMPTUSER);
		WebBrowser1.outerHTML = "";
		window.onerror = oldHandler;
	}	

	function deal()
	{
		WebBrowser1.outerHTML = "";
		window.onerror = oldHandler;
		return true;
	}

	function IE5()
	{
		window.print();
		return true;
	}

// Check whether string s is empty.
function isEmpty(s) {
   return ((s == null) || (s.length == 0))
}

function isInteger (s){   
	var i;
    if (isEmpty(s)) 
       if (isInteger.arguments.length == 1) return defaultEmptyOK;
       else return (isInteger.arguments[1] == true);

    // Search through string's characters one by one
    // until we find a non-numeric character.
    // When we do, return false; if we don't, return true.

    for (i = 0; i < s.length; i++) { 
	   // Check that current character is number.
        var c = s.charAt(i);

        if (!isDigit(c)) return false;
    }
    // All characters are numbers.
    return true;
}

function isDigit (c) {   
	return ((c >= "0") && (c <= "9"))
}

function limitTextArea(strQuestionID, objEssayControl, maxlength, objEvent)
{
    if (maxlength == "")
    {
	    maxlength = 7900;
    }
    
    var strSelection="";
    // Get the selected text for IE browser
    if (document.selection)
    {
        strSelection =  document.selection.createRange().text;
    }
    // Get the selected text for non IE browser
    else if ((objEssayControl.selectionEnd - objEssayControl.selectionStart) > 0)
    {
        strSelection = objEssayControl.value.substring(objEssayControl.selectionStart, objEssayControl.selectionEnd);
    }

    if ((maxlength <= objEssayControl.value.length) && (strSelection == ""))
    {
        // For IE the onKeyress event only fires for alphanumeric keys. For other browsers, 
        // it fires off for any keyboard key or key combination
        
        // If IE browser.
        if (window.event)
        {
            window.event.returnValue = false;
        }
        // If non IE browser
        else if (objEvent.charCode > 0)
        {
            objEvent.preventDefault();
        }
    }
    else
    {
        // Update the word count
        checkEssayLength(strQuestionID, objEssayControl, maxlength);
	}
}
function limitTextAreaPaste(strQuestionID, objEssayControl, maxlength)
{
	window.event.returnValue = false;
	if (maxlength == "")
	{
		maxlength = 7900;
	}
	// Get the data to be pasted from the clipboard
	if (window.clipboardData == undefined)
	{
		 var strToPaste = window.event.clipboardData.getData("Text");
	}
	else
	{
		 var strToPaste = window.clipboardData.getData("Text");
	}
   
    // If the total length of text resulting from pasting is more than allowed, cancel the paste
    if ((strToPaste.length + objEssayControl.value.length) <= maxlength)
    {
		
       if (document.selection == undefined) {    // all browsers, except IE before version 9
			
			if (objEssayControl.selectionStart || objEssayControl.selectionStart == '0') {
				var startPos = objEssayControl.selectionStart;
				var endPos = objEssayControl.selectionEnd;
				var scrollTop = objEssayControl.scrollTop;
				objEssayControl.value = objEssayControl.value.substring(0, startPos) + strToPaste + objEssayControl.value.substring(endPos, objEssayControl.value.length);
				objEssayControl.focus();
				objEssayControl.selectionStart = startPos + strToPaste.length;
				objEssayControl.selectionEnd = startPos + strToPaste.length;
			}
			
		} 
		else {   // Internet Explorer before version 9
				var objTR = document.selection.createRange();
				objTR.text = strToPaste + objTR.text;
			} 
		// Update the word count
        checkEssayLength(strQuestionID, objEssayControl, maxlength);
    }
}

// This function does not work for IE before version 9 and Safari browsers for now.
function limitTextAreaDrop(strQuestionID, objEssayControl, maxlength)
{
    window.event.returnValue = false;
	if (maxlength == "")
	{
		maxlength = 7900;
	}
	
    var strToPaste = window.event.dataTransfer.getData("Text");
	
    if ((strToPaste.length + objEssayControl.value.length) <= maxlength)
    {
		if (objEssayControl.selectionStart || objEssayControl.selectionStart == '0') {
				var startPos = objEssayControl.selectionStart;
				var endPos = objEssayControl.selectionEnd;
				var scrollTop = objEssayControl.scrollTop;
				objEssayControl.value = objEssayControl.value.substring(0, startPos) + strToPaste + objEssayControl.value.substring(endPos, objEssayControl.value.length);
				objEssayControl.focus();
				objEssayControl.selectionStart = startPos + strToPaste.length;
				objEssayControl.selectionEnd = startPos + strToPaste.length;
			}
        // Update the word count
        checkEssayLength(strQuestionID, objEssayControl, maxlength);
    }
}


function checkEssayLength(strQuestionID, objEssayControl, maxlength) {
    var objCountDiv = document.getElementById("charCount" + strQuestionID);
    if (typeof (objCountDiv) == "object") {
        if (maxlength == "") {
            maxlength = 7900;
        }
        objCountDiv.innerHTML = "Characters left in your response " + (maxlength - objEssayControl.value.length);
        //AYI-1620 Disable enter key if no of characters is less than 2
        if (maxlength - objEssayControl.value.length < 2) {
            disableEnter();
        }
    }
}
function disableEnter() {
    if (window.event) {
        if (window.event.keyCode == 13) {

            cancelKey(event);
            return false;
        }
        else {

            return true;
        }
    }
    return true; 

}

// Count characters in essay response types
function EssayCharacterCount(QuestionId, AnswerID, Maxlength)
{
	var qid = QuestionId;
	var aid = AnswerID;
	var maxlength = Maxlength;
	var objElementName;
	
	if (qid != "")
	{
		if (aid == "") 
		{
			objElementName = "q" + 	qid + "_";
		}
		else
		{
			objElementName = "q" + 	qid + "_" + aid;	
		}
	
		if (objElementName != "")
		{
			var ansValue = document.frmMain.elements[objElementName].value;
	
			if (maxlength == "")
			{
				maxlength = 7900;
			}
	
			if (ansValue != "")
			{
				var anslength = ansValue.length;
				alert("Your response (including spaces) is currently " + anslength + " characters in length. The character limit for this question is "  + maxlength + ".");
			}
			else
			{
				alert("You did not provide any response to this question.");
			}
		}
		else
		{
			alert("Cannot create element name as Question Id was not specified.");
		}
	}
	else
	{
		alert("Question Id was not specified.");
	}
}
// make eassy text area readonly
function EssayEnable(qid, aid, blnEnabled)
{
	var objElementName;

	if (aid == "") 
	{
		objElementName = "q" + 	qid + "_";
	}
	else
	{
		objElementName = "q" + 	qid + "_" + aid;	
	}
	
	document.frmMain.elements[objElementName].disabled = blnEnabled;
}

// toggleView toggles whether or not a specified row is visible
function toggleFolderRow(objRow)
{
	var imgX = eval('document.' + objRow.id + '_img');
	
	if(objRow.style.display =="none" )
	{
		if (checkIE7orOlderVersion() == true) 
		{
			objRow.style.display="block";
		}
		else
		{
			objRow.style.display="table-row";
		}
		imgX.src = "../images/common_images/small_folder_open.gif";
	}
	else
	{
		
			objRow.style.display="none";
		
		imgX.src = "../images/common_images/small_folder.gif";
	}
}

function killChars(strWords, blnReplace)
{
    var newChars = "";
 	if (strWords != "")
	{
		newChars=strWords;
		//Remove Culprit Characters/Character Sequences
		var badChars = new Array("<script",";","javascript","http://","javascript:","javascript://","<script","<img","<iframe", "<body", "<embed", "<div", "<input");
		
		for (i = 0; i < badChars.length; i++)
		{
			var regE = new RegExp(badChars[i],"gi")
			while (regE.test(newChars))
		 	{
			 	newChars=newChars.replace(regE, "");
		 	}
		}	
		// on events                               
		newChars=killHTMLEvents(newChars  ,true);  //+ "< onload='aaa'> <a href='abcd'> test abcd</a> "
		
		//newChars=newChars +" <style='mssx:expression(alert(1))'><style='mssx:eval(alert(1))'>"; //test
		//remove expression() and eval()
		//newChars= newChars.replace(/expression\s*\([^)]*\)|eval\s*\([^)]*\)/gi,"");
		//         <\s*style\s*[^>]*>\s*[\s\S]*?@\s*import[\s\S]*?</style\s*>   .... filter <style>@import'...'</style>
		var regE = new RegExp("expression\s*\([^)]*\)|eval\s*\([^)]*\)|<\s*style\s*[^>]*>\s*[\s\S]*?@\s*import[\s\S]*?</style\s*>","gi")
		while (regE.test(newChars))
		{
			newChars=newChars.replace(regE, "");
		}
		
		
	}
	return newChars;
}
  
  
function killHTMLEvents(strWords, blnFilterHref)
 {
   var strPattern = "\s*((onerror|onblur|onchange|onclick|ondblclick|onfocus|onkeypress|onkeydown|onmousedown|onmouseup|onload|onunload|onmousemove|onmouseout|onmouseover|onreset|onselect|onsubmit)\s*=\s*((['\"]?)[^\4>]*?((\4)|(?=>))))|href\s*=\s*(['\"]?)javascript[^\8>]*?((\8)|(?=>))";
   var regPattern = new RegExp(strPattern,"gi");
   	while (regPattern.test(strWords))
	{
		strWords = strWords.replace(regPattern,""); 
	}

    if (blnFilterHref == true )
        {
			//strPattern = "<[Aa]\s+[^>]+>|<\/[Aa]>"; //this will match <a href="..."> text...</a> and replace <a ...> and </a> leaving link text...
			strWords = strWords.replace(/<[Aa]\s+[^>]+>|<\/[Aa]>/gi,""); 
        }
	return strWords;    
}

//AYI-276 --- SUG: Move multiple items into a folder at once
//strTemplateType will be empty when calling from common/SelectFolder.asp
//strTemplateType will hold the template type name when coming from different template pages
function MoveToFolder(objForm, strTemplateType)
{	
	var intCount;
	var intLength;
	var intChecked = 0;
	var selectedIDs = "";	
	
	intLength = objForm.length;
			
	for (intCount=0; intCount < (intLength); intCount++)
	{	
		if(objForm.elements[intCount].type == 'checkbox')
		{
			if (objForm.elements[intCount].checked==true)
			{
				intChecked++;
				selectedIDs = selectedIDs + "," + objForm.elements[intCount].value;				
			}
		}		
	}	
		
	if (intChecked == 0)
    {
        addError('You must select an item to move.');
        displayErrors();
    }
    else
    {
        if (strTemplateType != "")
        {
            newwin = window.open("../Common/SelectFolder.asp?d=" + getTimeStamp() + "&templateType=" + strTemplateType, "SelectFolder", "scrollbars=yes, resizable=yes, status=no, menubar=no, toolbar=no, width=720, height=600, left=50 top=50");
        }
        else
        {
            return selectedIDs;
        }
    }
}

function redirect(strURL)
{
    newwin.close();
    self.location =  strURL;
}

// AYI-1092  Editing Text field and pressing escape(esc) is wiping off answers for radio button, check boxes
// and other choice group questions in IE
var keyPressCount = 0;
window.document.onkeydown = disableEscape;
function disableEscape(evt) 
{
    evt = (evt) ? evt : ((event) ? event : null);
    if (evt) 
        {
            if (evt.keyCode == 27) 
            {
                keyPressCount = keyPressCount + 1;
                if (keyPressCount >= 2) 
                {
                    cancelKey(evt);
                    return false;
                }
            }
            else 
            {
              keyPressCount = 0;
              return true;
            }
        }
}

function cancelKey(evt) 
{
    if (evt.preventDefault) 
    {
        evt.preventDefault();
        return false;
    }
    else 
    {
        evt.keyCode = 0;
        evt.returnValue = false;
    }
}


function getInternetExplorerVersion()
// Returns the version of Windows Internet Explorer or a -1
// (indicating the use of another browser).
{
    var rv = -1; // Return value assumes failure.
    if (navigator.appName == 'Microsoft Internet Explorer') {
        var ua = navigator.userAgent;
        var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
        if (re.exec(ua) != null)
            rv = parseFloat(RegExp.$1);
    }
   return rv;
}

function checkIE7orOlderVersion()
{

    var blnReturn = false;
    var ver = getInternetExplorerVersion();
    if (ver > -1) {
        if (ver < 8.0)
            blnReturn = true;
    }
    return blnReturn;

}